// pages/api/oraculum.js
import OpenAI from "openai";

const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const NODE_ENV = process.env.NODE_ENV;

// Warn in dev if key missing
if (!OPENAI_API_KEY) {
  console.warn("[Oraculum] OPENAI_API_KEY is missing. Set it in .env.local");
}

const client = new OpenAI({ apiKey: OPENAI_API_KEY });

export default async function handler(req, res) {
  const startedAt = Date.now();

  try {
    if (req.method !== "POST") {
      return res.status(405).json({ error: "Method not allowed" });
    }

    if (!OPENAI_API_KEY) {
      return res.status(500).json({
        error: "Config error: OPENAI_API_KEY is missing. Set it in .env.local",
      });
    }

    // ---- INPUT VALIDATION ----
    const body = req.body || {};
    const cards = body.cards;
    const question = body.question;

    const errors = [];
    if (!Array.isArray(cards) || cards.length === 0) {
      errors.push("Missing or invalid 'cards' (non-empty array required).");
    }
    if (typeof question !== "string" || question.trim().length === 0) {
      errors.push("Missing or invalid 'question' (non-empty string required).");
    }
    if (errors.length) {
      return res.status(400).json({ error: errors.join(" ") });
    }

    // sanitize cards
    const sanitizedCards = cards
      .map((c) => (typeof c === "string" ? c.trim() : String(c)))
      .filter(Boolean)
      .slice(0, 10);

    console.log("[Oraculum] ▶ request", {
      question: question.slice(0, 140),
      cards: sanitizedCards,
    });

    const model = "gpt-4o-mini";

    // NO backticks, ASCII only, explicit \n
    const systemPrompt =
      "You are Oraculum Aquae Astrae, the voice of the Star Water (noies-viz-intuicio).\n" +
      "Provide tarot interpretations in Hungarian with a gentle, mystical, yet practical tone.\n" +
      "Always return:\n" +
      "1) A short summary (2-3 sentences),\n" +
      "2) 3 key insights (bullets),\n" +
      "3) 3 practical steps (bullets) with water-element focus (ritual, breath, writing).\n" +
      "Avoid overcomplication. Be empathetic and clear.\n" +
      "Use proper Hungarian accents in the response.";

    const userPrompt =
      "Kerdés: " +
      question +
      "\nKartyak: " +
      sanitizedCards.join(", ") +
      "\nKerlek, add meg az ertelmezest a fenti strukturaban.";

    const completion = await client.chat.completions.create({
      model,
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: userPrompt },
      ],
      temperature: 0.8,
      max_tokens: 700,
    });

    const content =
      (completion &&
        completion.choices &&
        completion.choices[0] &&
        completion.choices[0].message &&
        completion.choices[0].message.content) ||
      "";

    if (!content) {
      console.error("[Oraculum] Empty response from OpenAI");
      return res.status(502).json({
        error:
          "Az orakulum most nem adott valaszt. Probald ujra, vagy modositd a kerdest/kartyakat.",
      });
    }

    const ms = Date.now() - startedAt;
    console.log("[Oraculum] ✓ success in " + ms + " ms (model: " + model + ")");

    return res.status(200).json({ interpretation: content });
  } catch (err) {
    const ms = Date.now() - startedAt;
    console.error("[Oraculum] ✖ error", {
      elapsedMs: ms,
      name: err && err.name,
      message: err && err.message,
      status: (err && err.status) || (err && err.response && err.response.status),
      data: err && err.response && err.response.data,
    });

    const publicMessage =
      "Szerverhiba tortent az ertelmezes kozben. Ellenorizd az internetkapcsolatot es az API-kulcsot, majd probald ujra.";

    if (NODE_ENV !== "production") {
      return res.status(500).json({
        error: publicMessage,
        debug: {
          name: err && err.name,
          message: err && err.message,
          status: (err && err.status) || (err && err.response && err.response.status),
        },
      });
    }

    return res.status(500).json({ error: publicMessage });
  }
}
