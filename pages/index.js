import { useMemo, useState, useEffect } from "react";
import SpreadDiagram from "./components/SpreadDiagram";
import { motion } from "framer-motion";
import Image from "next/image";

/**
 * Aqua Astr√¶ ‚Äî Oraculum UI
 * - Tier-ek: üíß Aqua Spark, üåä Lumen Flow, üåï Astral Depth
 * - Auto tier-v√°laszt√°s k√°rtyasz√°m alapj√°n (fel√ºl√≠rhat√≥)
 * - K√©rd√©s + Kontextus mez≈ë, k√°rty√°k + reversed + kiesett k√°rty√°k
 * - /api/oraculum (v3) h√≠v√°s
 */

const SPREADS = {
  freeform: {
    label: "Szabad (intuit√≠v)",
    positions: [],
    help: {
      oneLiner:
        "Intu√≠ci√≥-vez√©relt h√∫z√°s ‚Äî engedd, hogy a kezed v√°lasszon, az elme csak figyel.",
      text:
        "Vegy√©l ki tetsz≈ëleges sz√°m√∫ lapot (1‚Äì10). √çrd be a k√°rty√°k nev√©t √©s jel√∂ld, ha fejjel lefel√© √©rkezett.",
      focus:
        "Kever√©s k√∂zben l√©legezz lassan: bel√©gz√©s n√©gyig, kil√©gz√©s hatig; engedd, hogy a k√©rd√©s k√©pp√© s≈±r≈±s√∂dj√∂n.",
      layout:
        "Ter√≠ts spont√°n: k√∂rben vagy l√°gy sorban ‚Äî ahogy az √°raml√°s h√≠v; jegyezd meg a felbukkan√°s sorrendj√©t.",
      image: null,
    },
  },
  one_card: {
    label: "Egyk√°rty√°s √ºzenet",
    positions: [{ key: "p1", label: "√úzenet a napra" }],
    help: {
      oneLiner: "Egy koncentr√°lt √ºzenet a jelen pillanat f√≥kusz√°r√≥l.",
      text:
        "Egy lap. L√©legezz m√©lyeket, majd h√∫zz egyet. A lap az aznapi f√≥kuszt jel√∂li.",
      focus:
        "Mondd csendben: ‚ÄûMit √ºzen ma a csillagv√≠z?‚Äù √©s tartsd a kezed a pakli felett h√°rom l√©legzetig.",
      layout:
        "Egy lapot helyezz k√∂z√©pre, sz√≠vvonalad el√©; a k√°rtya k√∂zvetlen√ºl neked sz√≥l.",
      image: null,
    },
  },
  three_card: {
    label: "H√°romk√°rty√°s (m√∫lt‚Äìjelen‚Äìj√∂v≈ë / d√∂nt√©si m√©rleg)",
    positions: [
      { key: "p1", label: "M√∫lt / Opci√≥ A" },
      { key: "p2", label: "Jelen / K√∂ztes tan√°cs" },
      { key: "p3", label: "J√∂v≈ë / Opci√≥ B" },
    ],
    help: {
      oneLiner:
        "H√°rom ponton √°t√≠vel≈ë t√∂rt√©net: honnan j√∂ssz, merre √°llsz, hov√° tart az √°raml√°s.",
      text:
        "Helyezd el a h√°rom lapot bal‚Üíjobb sorrendben. Bal: m√∫lt vagy opci√≥ A, K√∂z√©p: jelen/ir√°ny, Jobb: j√∂v≈ë vagy opci√≥ B.",
      focus:
        "K√©pzeld el a m√∫lt‚Äìjelen‚Äìj√∂v≈ë hull√°mz√°s√°t; ne v√°laszt er≈ëltess, hanem ir√°nyt k√©rj.",
      layout:
        "Balr√≥l jobbra, enyhe f√©lk√∂rben (p1 ‚Üí p2 ‚Üí p3), hogy a t√∂rt√©net folyhasson.",
      image: null,
    },
  },
  relationship: {
    label: "Kapcsolati h√°romsz√∂g (√©n‚Äìte‚Äìkapcsolat)",
    positions: [
      { key: "p1", label: "√ân" },
      { key: "p2", label: "Te/Partner" },
      { key: "p3", label: "Kapcsolat/mez≈ë" },
    ],
    help: {
      oneLiner: "K√©t part √©s a k√∂zt√ºk √°raml√≥ v√≠z: a kapcsolat √©l≈ë mezeje.",
      text:
        "H√°rom lap h√°romsz√∂gben: fent az √ân, bal lent a Te/Partner, jobb lent a Kapcsolat tere.",
      focus:
        "L√©legezz egy√ºtt a kapcsolat eml√©k√©vel; ne a konfliktusra, hanem a k√∂z√∂s pulzusra hangol√≥dj.",
      layout:
        "H√°romsz√∂g: p1 fent, p2 bal lent, p3 jobb lent; a tekinteted k√∂r√∂z≈ë mozg√°ssal j√°rja be.",
      image: null,
    },
  },
  elements: {
    label: "Elem-harmoniz√°l√≥ (v√≠z‚Äìt≈±z‚Äìf√∂ld‚Äìleveg≈ë)",
    positions: [
      { key: "p1", label: "V√≠z (√©rzelem)" },
      { key: "p2", label: "T≈±z (akarat)" },
      { key: "p3", label: "F√∂ld (stabilit√°s)" },
      { key: "p4", label: "Leveg≈ë (gondolat)" },
    ],
    help: {
      oneLiner:
        "A n√©gy elem egyens√∫lya mutatja, hol √°radj √©s hol terelj partot.",
      text:
        "N√©gy lap n√©gy √©gt√°j szerint. Jel√∂ld, ha valamelyik fejjel lefel√© √©rkezett ‚Äî ez blokkra utalhat.",
      focus:
        "√ârezd, ahogy a tested n√©gy sarka a n√©gy elemmel l√©legzik; k√©rdezd: ‚ÄûHol billen az egyens√∫ly?‚Äù",
      layout:
        "√âgt√°jak szerint: √âszak‚ÄìV√≠z (p1), Kelet‚ÄìLeveg≈ë (p4), D√©l‚ÄìT≈±z (p2), Nyugat‚ÄìF√∂ld (p3) ‚Äî √≥ramutat√≥ szerint k√∂rbej√°rva.",
      image: null,
    },
  },
  moon: {
    label: "Hold√∫t / ciklikus",
    positions: [
      { key: "p1", label: "√öjhold ‚Äì sz√°nd√©k" },
      { key: "p2", label: "Els≈ë negyed ‚Äì l√©p√©s" },
      { key: "p3", label: "Telihold ‚Äì cs√∫cspont" },
      { key: "p4", label: "Utols√≥ negyed ‚Äì elenged√©s" },
    ],
    help: {
      oneLiner: "A Hold ritmusa: vet√©s, n√∂veked√©s, arat√°s, elenged√©s.",
      text:
        "N√©gy lap k√∂rben: √∫jholdt√≥l teliholdig. A k√∂r√≠v mozg√°s√°t k√∂vesd a kirak√°sn√°l.",
      focus:
        "Hangol√≥dj a l√©gz√©s ciklus√°ra √©s k√©rdezd: ‚ÄûMelyik f√°zisban vagyok most, √©s mi t√°mogat?‚Äù",
      layout:
        "K√∂r√≠vben p1 ‚Üí p2 ‚Üí p3 ‚Üí p4; √∫jholdt√≥l indulva √≥ramutat√≥ szerint haladj.",
      image: null,
    },
  },
  celtic_cross: {
    label: "Kelta kereszt (10 lap)",
    positions: [
      { key: "p1", label: "Kereszt ‚Äì Jelen helyzet" },
      { key: "p2", label: "Kereszt ‚Äì Kih√≠v√°s" },
      { key: "p3", label: "Tudat alatti" },
      { key: "p4", label: "M√∫lt" },
      { key: "p5", label: "Tudatos/c√©l" },
      { key: "p6", label: "K√∂zelj√∂v≈ë" },
      { key: "p7", label: "Saj√°t hozz√°√°ll√°s" },
      { key: "p8", label: "K√ºls≈ë hat√°sok" },
      { key: "p9", label: "Rem√©nyek/f√©lelmek" },
      { key: "p10", label: "Kimenet" },
    ],
    help: {
      oneLiner:
        "√Åtfog√≥ t√©rk√©p a helyzetr≈ël: gy√∂k√©rt≈ël a kimenetig, bels≈ët≈ël a k√ºls≈ëig.",
      text:
        "Rakd ki a klasszikus kereszt + szem√©lyoszlop elrendez√©st (1‚Üí10). Csatolhatsz k√©pet az inf√≥-blokkba.",
      focus:
        "Fogalmazd meg a k√©rd√©st egyetlen tiszta mondatban; l√©legezz be higgadtan, ki hosszabban.",
      layout:
        "Sorrend: p1 √©s p2 keresztben, majd p3 (lent), p4 (bal), p5 (fel√ºl), p6 (jobb), ezut√°n a szem√©lyoszlop p7‚Üíp10 alulr√≥l felfel√©.",
      image: null,
    },
  },
  shadow: {
    label: "√Årny√©kmunka",
    positions: [
      { key: "p1", label: "√Årny√©k-gy√∂k√©r" },
      { key: "p2", label: "Maszk/Persona" },
      { key: "p3", label: "Kiv√°lt√≥ helyzet" },
      { key: "p4", label: "Tanul√°s/F√©ny" },
      { key: "p5", label: "Integr√°ci√≥" },
    ],
    help: {
      oneLiner:
        "T√ºkr√∂t tart a rejtett r√©szeknek ‚Äî gyeng√©den, de ≈ëszint√©n.",
      text:
        "F√≥kusz√°lt, √∂nismereti kirak√°sra. Id≈ët hagyj a lapokra, jegyzetelj.",
      focus:
        "Mondd: ‚ÄûK√©szen √°llok l√°tni azt, ami eddig rejtve volt.‚Äù ‚Äî √©s engedd felj√∂nni az √©rz√©seket √≠t√©let n√©lk√ºl.",
      layout:
        "F√ºgg≈ëleges fonal: p1 alul (gy√∂k√©r), p2 f√∂l√∂tte, p3 k√∂z√©p, p4 felette, p5 legfel√ºl (√∂sszegz≈ë f√©ny).",
      image: null,
    },
  },
};

// TIER-ek
const TIERS = [
  { value: "aqua_spark", label: "üíß Aqua Spark (Gyors)" },
  { value: "lumen_flow", label: "üåä Lumen Flow (Kiegyens√∫lyozott)" },
  { value: "astral_depth", label: "üåï Astral Depth (M√©ly)" },
];

function createEmptyPositions(spreadKey) {
  const pos = SPREADS[spreadKey]?.positions || [];
  return pos.map((p) => ({ key: p.key, label: p.label, name: "", reversed: false }));
}

export default function Oraculum() {
  const [spread, setSpread] = useState("three_card");
  const [question, setQuestion] = useState("");
  const [context, setContext] = useState("");
  const [tier, setTier] = useState("aqua_spark");
  const [tierTouched, setTierTouched] = useState(false);

  const [jumpers, setJumpers] = useState("");
  const [freeCards, setFreeCards] = useState("Star,Fool,Moon");
  const [positions, setPositions] = useState(createEmptyPositions("three_card"));

  const [loading, setLoading] = useState(false);
  const [resp, setResp] = useState(null);
  const [err, setErr] = useState("");

  function onSpreadChange(next) {
    setSpread(next);
    setPositions(createEmptyPositions(next));
  }

  const spreadDef = useMemo(() => SPREADS[spread], [spread]);

  function handlePosChange(idx, field, value) {
    setPositions((old) => {
      const cp = [...old];
      cp[idx] = { ...cp[idx], [field]: value };
      return cp;
    });
  }

  // Automatikus tier-v√°laszt√°s a megadott k√°rtyasz√°m alapj√°n (felhaszn√°l√≥ fel√ºl√≠rhatja)
  useEffect(() => {
    // k√°rtyasz√°m meghat√°roz√°sa
    let count = 0;
    if (spread === "freeform") {
      count = freeCards
        .split(",")
        .map((s) => s.trim())
        .filter(Boolean).length;
    } else {
      count = positions.filter((p) => (p.name || "").trim()).length;
    }

    if (tierTouched) return; // ha a user m√°r v√°lasztott, nem √≠rjuk fel√ºl

    let autoTier = "aqua_spark";
    if (count <= 1) autoTier = "aqua_spark";
    else if (count <= 4) autoTier = "lumen_flow";
    else autoTier = "astral_depth";

    setTier(autoTier);
  }, [positions, freeCards, spread, tierTouched]);

  async function submit() {
    setLoading(true);
    setErr("");
    setResp(null);

    let cardsPayload = [];
    if (spread === "freeform") {
      cardsPayload = freeCards
        .split(",")
        .map((s) => s.trim())
        .filter(Boolean)
        .map((name, i) => ({ name, reversed: false, positionKey: `f${i + 1}` }));
    } else {
      cardsPayload = positions
        .filter((p) => p.name && p.name.trim())
        .map((p) => ({
          name: p.name.trim(),
          reversed: !!p.reversed,
          positionKey: p.key,
          positionLabel: p.label,
        }));
    }

    if (cardsPayload.length === 0) {
      setErr("Adj meg legal√°bb egy k√°rty√°t.");
      setLoading(false);
      return;
    }

    const effectiveQuestion =
      spread === "one_card" && !((question || "").trim())
        ? "Mit √ºzen az univerzum a mai napra?"
        : (question || "").trim();

    if (!effectiveQuestion) {
      setErr("Adj meg egy k√©rd√©st, vagy haszn√°ld az egyk√°rty√°s alap√©rtelmez√©st.");
      setLoading(false);
      return;
    }

    const body = {
      cards: cardsPayload,
      question: effectiveQuestion,
      context: (context || "").trim(),
      spreadType: spread,
      tier,
      jumpers: jumpers.split(",").map((s) => s.trim()).filter(Boolean),
    };

    try {
      const r = await fetch("/api/oraculum", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(body),
      });

      const ct = r.headers.get("content-type") || "";
      const data = ct.includes("application/json") ? await r.json() : { error: await r.text() };

      if (!r.ok) throw new Error(data?.error || `Hiba (status ${r.status})`);
      setResp(data);
    } catch (e) {
      setErr(e.message || "Ismeretlen hiba");
    } finally {
      setLoading(false);
    }
  }

  return (
    <div className="aa-container mt-8">
      {/* Banner + k√∂z√©pre √≠rt c√≠m */}
      <div className="mb-6 relative w-full aspect-[3/1] rounded-2xl overflow-hidden shadow-sm">
        <Image src="/banner.jpg" alt="Aqua Astr√¶ Banner" fill className="object-cover" priority />
        <div className="absolute inset-0 flex items-center justify-center">
          <h1 className="text-white text-3xl sm:text-4xl md:text-5xl font-[Cormorant_Garamond] tracking-wide drop-shadow-lg">
            Aqua Astr√¶ ‚Äî Oraculum
          </h1>
        </div>
      </div>

      {/* Spread selector + info */}
      <label className="mt-4 block text-sm">H√∫z√°s t√≠pusa</label>
      <select
        value={spread}
        onChange={(e) => onSpreadChange(e.target.value)}
        className="mt-1 w-full rounded-lg border border-gray-300 p-2"
      >
        {Object.entries(SPREADS).map(([k, v]) => (
          <option key={k} value={k}>{v.label}</option>
        ))}
      </select>

      <div className="mt-4 rounded-2xl border border-gray-200 p-4 shadow-sm">
        <div className="font-semibold">{spreadDef.help.oneLiner}</div>
        <div className="mt-1">{spreadDef.help.text}</div>
        {spreadDef.help.focus && (
          <div className="mt-2 italic">üíß Kever√©s k√∂zben: {spreadDef.help.focus}</div>
        )}
        {spreadDef.help.layout && (
          <div className="mt-1">üìú Ter√≠t√©s: {spreadDef.help.layout}</div>
        )}
        {spreadDef.help.image && (
          <div className="mt-2">
            <img src={spreadDef.help.image} alt="spread-diagram" className="max-w-full" />
          </div>
        )}
        {spreadDef.positions?.length > 0 && (
          <div className="mt-3 text-sm">
            <strong>Poz√≠ci√≥k √©s sorrend:</strong>
            <ol className="mt-1 list-decimal space-y-0.5 pl-5">
              {spreadDef.positions.map((p) => (
                <li key={p.key}>
                  {p.label} <span className="opacity-70">({p.key})</span>
                </li>
              ))}
            </ol>
          </div>
        )}
      </div>

      {/* Vizu√°lis diagram */}
      <SpreadDiagram spreadKey={spread} positions={spreadDef.positions} />

      {/* Tier kiv√°laszt√≥ */}
      <div className="mt-4">
        <label className="text-sm">V√°lasz szintje (Tier)</label>
        <select
          value={tier}
          onChange={(e) => { setTier(e.target.value); setTierTouched(true); }}
          className="mt-1 w-full rounded-lg border border-gray-300 p-2"
        >
          {TIERS.map((o) => (
            <option key={o.value} value={o.value}>{o.label}</option>
          ))}
        </select>
        <div className="mt-1 text-xs text-gray-500">
          Automatikusan v√°laszt a k√°rtyasz√°m alapj√°n (1 ‚Üí üíß, 2‚Äì4 ‚Üí üåä, 5+ ‚Üí üåï), de b√°rmikor √°t√≠rhatod.
        </div>
      </div>

      {/* Question */}
      <div className="mt-4">
        <label className="text-sm">K√©rd√©s</label>
        <input
          value={question}
          onChange={(e) => setQuestion(e.target.value)}
          placeholder="√çrd ide a k√©rd√©sed‚Ä¶"
          className="mt-1 w-full rounded-lg border border-gray-300 p-2"
        />
        {spread === "one_card" && !((question || "").trim()) ? (
          <div className="mt-1 text-xs text-gray-500">
            Egyk√°rty√°sn√°l √ºresen is mehet ‚Äî alap√©rtelmez√©s: ‚ÄûMit √ºzen az univerzum a mai napra?‚Äù
          </div>
        ) : null}
      </div>

      {/* Context */}
      <div className="mt-4">
        <label className="text-sm">Kontextus (opcion√°lis)</label>
        <textarea
          value={context}
          onChange={(e) => setContext(e.target.value)}
          placeholder="R√∂vid helyzetle√≠r√°s: mi a h√°tt√©r, mi t√∂rt√©nt eddig, milyen korl√°tok vannak‚Ä¶"
          className="mt-1 w-full rounded-lg border border-gray-300 p-2 min-h-[96px]"
        />
      </div>

      {/* Cards input section */}
      {spread === "freeform" ? (
        <div className="mt-4">
          <label className="text-sm">K√°rty√°k (vessz≈ëvel)</label>
          <input
            value={freeCards}
            onChange={(e) => setFreeCards(e.target.value)}
            placeholder="Star,Fool,Moon"
            className="mt-1 w-full rounded-lg border border-gray-300 p-2"
          />
        </div>
      ) : (
        <div className="mt-4">
          <label className="text-sm">K√°rty√°k poz√≠ci√≥ szerint</label>
          <div className="mt-2 grid grid-cols-1 gap-3 sm:grid-cols-2">
            {positions.map((p, idx) => (
              <div key={p.key} className="rounded-xl border border-gray-200 p-3">
                <div className="mb-1 text-xs opacity-80">{p.label}</div>
                <input
                  value={p.name}
                  onChange={(e) => handlePosChange(idx, "name", e.target.value)}
                  placeholder="pl. The Star"
                  className="w-full rounded-lg border border-gray-300 p-2"
                />
                <label className="mt-3 flex flex-col items-center text-sm text-sky-900">
                  <input
                    type="checkbox"
                    className="h-4 w-4 accent-sky-700"
                    checked={!!p.reversed}
                    onChange={(e) => handlePosChange(idx, "reversed", e.target.checked)}
                  />
                  <span className="mt-1 leading-tight text-center">Reversed</span>
                  <span className="opacity-60 leading-tight text-center">(fejjel lefel√©)</span>
                </label>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Jumpers */}
      <div className="mt-4">
        <label className="text-sm">Kiesett k√°rty√°k (opcion√°lis, vessz≈ëvel)</label>
        <input
          value={jumpers}
          onChange={(e) => setJumpers(e.target.value)}
          placeholder="Ha kever√©s k√∂zben esett ki lap: pl. Tower,Star"
          className="mt-1 w-full rounded-lg border border-gray-300 p-2"
        />
      </div>

      {/* Submit */}
      <button
        onClick={submit}
        disabled={loading}
        className="mt-4 inline-flex items-center gap-2 rounded-xl bg-sky-700 hover:bg-sky-800 transition text-white px-4 py-2 font-semibold shadow-sm disabled:opacity-60"
      >
        {loading && (
          <span className="inline-block h-4 w-4 animate-spin rounded-full border-2 border-white border-t-transparent" />
        )}
        {loading ? "K√©rdezek‚Ä¶" : "K√©rdezek"}
      </button>

      {/* üíß Motion aura (loading k√∂zben) */}
      {loading && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: [0.3, 1, 0.3] }}
          transition={{ duration: 2, repeat: Infinity }}
          className="mt-4 text-center text-sky-700 italic"
        >
          V√°rj√° csaje, var√°zsolok‚Ä¶
        </motion.div>
      )}

      {/* Error toast */}
      {err && (
        <div className="mt-4 rounded-xl border border-red-200 bg-red-50 p-3 text-red-800">
          <strong>Hiba:</strong> {err}
        </div>
      )}

      {/* Output */}
      {resp && (
        <motion.div
          initial={{ opacity: 0, y: 8 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          className="mt-6 rounded-2xl border border-gray-200 p-4 shadow-sm"
        >
          <h3 className="text-xl font-semibold">Eredm√©ny</h3>
          <pre className="mt-2 whitespace-pre-wrap font-mono text-sm">
            {resp.interpretation}
          </pre>
          <div className="mt-2 text-xs opacity-80">
            {resp.modelUsed ? <>Modell: {resp.modelUsed} | </> : null}
            {resp.tierUsed ? <>Tier: {resp.tierUsed} | </> : null}
            {typeof resp.tokens === "number" ? <>Tokenek: {resp.tokens} | </> : null}
            {typeof resp.costUSD === "number" ? <>K√∂lts√©g: ${resp.costUSD?.toFixed?.(4)}</> : null}
          </div>
        </motion.div>
      )}
    </div>
  );
}
